// -------------------------
// = Mixins
// -------------------------

// Dotted line

@mixin dotted-line($color1: var(--text_color), $color2: transparent, $space: 6, $width: 1) {
    background-image: linear-gradient(to right, $color1 0%, $color1 (100% / $space), $color2 (100% / $space));
    background-position: 0 bottom; 
    background-size: ($space + px) ($width + px);
    background-repeat: repeat-x;
}

// Focus visible fallback

@mixin focus() {

	@supports not selector(:focus-visible) {
		@content
	}	
}

@mixin focus2() {
	&:focus-visible {
		@content
	}
	@supports not selector(:focus-visible) {
		&:focus {
			@content
		}
	}	
}

// Link underline

@mixin underline($color: $primary_color, $width: .4rem) {

	text-decoration: none;
	background-image:
		linear-gradient(
			$color 0,
			$color .2rem
		);
	background-size: 0% $width;
	background-position: 0 bottom;
	background-repeat: no-repeat;
	transition: .2s ease-in-out;
	
	&:hover {
		background-size: 100% $width;
	}
	&:focus-visible {
		background-size: 100% $width;
	}
	
	@include focus {
		&:focus {
			background-size: 100% $width;
		}
	}
	
}

// Link Style

@mixin link-style($bg: dark) {
	
	$color: var(--text_color);
	$text: var(--text_color);
	
	@if $bg == white {
		$color: #fff;
		$text: #fff;
	}
	
	text-decoration: none;
	padding-bottom: .25rem;
    background-image:
		linear-gradient(
			transparent 0,
			transparent 0.9rem,
			$color 0.9rem,
			$color 1rem
		);
    background-size: 100% 1rem;
    background-position: 0 bottom;
    background-repeat: no-repeat;
	transition: .2s ease-in-out;
	
	&:hover {
		color: $text;
		background-image:
		linear-gradient(
			transparent 0,
			transparent 0.9rem,
			$color 0.9rem,
			$color 1rem
		);
		background-size: 20% 1rem;
	}
	&:focus {
		background-color: var(--text_color);
		color: #fff;
		background-image: none;
	}
	&:active {
		color: var(--secondary_color);
	}
	&:focus:visited {
		color: #fff;
	}	
}

// Center mode

@mixin center() {
	position: relative;
	margin-left: auto; 
	margin-right: auto;
	max-width: $max-width;	
}

// Visually obfuscate the text of an element (a11y ok)

@mixin a11y-hide($percent: 150%) {
	text-indent: $percent;
	white-space: nowrap;
	overflow: hidden;
}

// Visually hide an element (a11y ok)

@mixin a11y-hidden($width: 1px, $height: 1px) {
	position: absolute;
	display: block; 
	width: $width;
	height: $height;
	padding: 0;
	margin: 0;
	text-indent: 150%;
	white-space: nowrap;
	overflow: hidden;	
}

// Extend the click area to the entire block 

@mixin link-block() {
	content: '';
	position: absolute;
	top: 0; 
	left: 0; 
	right: 0; 
	bottom: 0;
	z-index: 100;	
}

// Opacity effect on hovered images links

@mixin img-opacity($opacity: .7) {
	a img {
		transition: opacity .2s ease-in-out;
	}
	a:hover img,
	a:focus img {
		opacity: $opacity;
	}	
}

// Add a pointer on ::before or ::after

@mixin pointer($orientation:top, $width:10px) {
	
	content: '';
	display: block; 
	width: 0; 
	height: 0;
	border-color: transparent; 
	border-width: $width;
	border-style: solid;

	@if $orientation == top {
		border-top-color: inherit;
	}
	@else if $orientation == bottom {
		border-bottom-color: inherit;
	}
	@else if $orientation == left {
		border-left-color: inherit;
	}
	@else if $orientation == right {
		border-right-color: inherit;
	}
	@else {
		border-top-color: inherit;
	}
	
}


// Mobile First Media Queries

@mixin rwd($width) {
	
	@if $width == xwide {
		@media only screen and (min-width: $width-xwide) {
			@content;
		}
	}
	@if $width == wide {
		@media only screen and (min-width: $width-wide) {
			@content;
		}
	}
	@else if $width == large {
		@media only screen and (min-width: $width-large) {
			@content;
		}
	}
	@else if $width == medium {
		@media only screen and (min-width: $width-medium) {
			@content;
		}
	}
	@else if $width == smallmedium {
		@media only screen and (min-width: $width-intermediate) {
			@content;
		}
	}
	@else if $width == small {
		@media only screen and (min-width: $width-small) {
			@content;
		}
	}
	@else if $width == tiny {
		@media only screen and (min-width: $width-tiny) {
			@content;
		}
	}
	@else {
		@media only screen and (min-width: $width) {
			@content;
		}
	}
}